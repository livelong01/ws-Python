# Polimorfismo em Python Orientado a Objetos
# Polimorfismo √© o princ√≠pio que permite que
# classes deridavas de uma mesma superclasse
# tenham m√©todos iguais (com mesma assinatura)
# mas comportamentos diferentes.
# Assinatura do m√©todo = Mesmo nome e quantidade
# de par√¢metros (retorno n√£o faz parte da assinatura)
# Opini√£o + princ√≠pios que contam:
# Assinatura do m√©todo: nome, par√¢metros e retorno iguais
# SO"L"ID
# Princ√≠pio da substitui√ß√£o de liskov
# Objetos de uma superclasse devem ser substitu√≠veis
# por objetos de uma subclasse sem quebrar a aplica√ß√£o.
# Sobrecarga de m√©todos (overload)  üêç = ‚ùå
# Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ
from abc import ABC, abstractmethod

class Notificacao(ABC):
    def __init__(self, mensagem) -> None: # O None e o
        self.mensagem = mensagem
    
    @abstractmethod
    def enviar(self) -> bool: ... #bool (bolean) nesse caso, sao dicas de prog para prog, para ajudar a entender o que resultado as funcoes. (N FAZEM NADA)

# n = Notificacao('Testando notificacao') #n funciona! pQ √â ABSTRATA  

class NotificacaoEmail(Notificacao):
    def enviar(self)-> bool:  #Princ√≠pio da substitui√ß√£o de liskov
        print('E-mail: Enviando: - ', self.mensagem)
        return True #Princ√≠pio da substitui√ß√£o de liskov

class NotificacaoSMS(Notificacao):
    def enviar(self)-> bool:  #Princ√≠pio da substitui√ß√£o de liskov
        print('SMS: Enviando: - ', self.mensagem)
        return False #Princ√≠pio da substitui√ß√£o de liskov

# ne = NotificacaoEmail('testando notificacao.')
# ne.enviar()

# ns = NotificacaoSMS('testando notificacao.')
# ns.enviar()

# def notificar(notificacao:str):  #agora o python s√≥ vai aceitar STR. E abaixo se vc por um ponto em notificacao, ele chama todas as funcoes str.... 
#     notificacao

def notificar(notificacao:Notificacao): #POLIMORFISMO NO OBJETO notificacao:Notificacao, pois ele aceita TODAS as classes FILHAS E ELA PROPRIA.
    notificacao_enviada = notificacao.enviar()

    if notificacao_enviada: # for verdadeira
        print('Notificacao enviada.')
    else:
        print('Notificacao n√£o enviada.')

notificacao_email = NotificacaoEmail('testando email.')
notificar(notificacao_email) #Aqui esta o polimorfismo! PRESTE ATENCAO AQUI.

notificacao_sms = NotificacaoSMS('testando SMS.')
notificar(notificacao_sms) #Aqui esta o polimorfismo! PRESTE ATENCAO AQUI.
