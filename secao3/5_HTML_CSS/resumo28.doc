https://developer.mozilla.org/pt-BR/docs/Learn_web_development/Core/CSS_layout/Flexbox
https://css-tricks.com/snippets/css/a-guide-to-flexbox/


Aqui est√° o resumo da aula 28 (parte 1), focado apenas no que √© novo.  

---

### Introdu√ß√£o ao Flexbox: Organiza√ß√£o de Layouts com Flex  

Nesta aula, aprendemos sobre **Flexbox**, uma t√©cnica poderosa para organizar elementos dentro de um container flex√≠vel.  

#### **Novos conceitos abordados:**  

1. **`display: flex;`**  
   - Transforma o container (`.flex-container`) em um flex container.  
   - Os elementos filhos (`.flex-item`) tornam-se automaticamente flex√≠veis.  

2. **`flex-direction`**  
   - Define a dire√ß√£o dos itens dentro do container:  
     - `row` (padr√£o) ‚Üí Itens organizados na horizontal, da esquerda para a direita.  
     - `column` ‚Üí Itens organizados na vertical.  

3. **`justify-content`** (Alinhamento horizontal dos itens)  
   - `space-between` ‚Üí Distribui os itens igualmente, com espa√ßos entre eles.  
   - Outros valores poss√≠veis:  
     - `flex-start` ‚Üí Alinha os itens √† esquerda.  
     - `flex-end` ‚Üí Alinha os itens √† direita.  
     - `center` ‚Üí Centraliza os itens.  
     - `space-around` ‚Üí Adiciona espa√ßamento ao redor dos itens.  
     - `space-evenly` ‚Üí Espa√ßos iguais entre os itens e nas laterais.  

4. **`align-items`** (Alinhamento vertical dos itens dentro do container)  
   - `flex-start` ‚Üí Itens alinhados no topo do container.  
   - `flex-end` ‚Üí Itens alinhados na parte inferior.  
   - `center` ‚Üí Itens centralizados verticalmente.  
   - `stretch` (padr√£o) ‚Üí Itens ocupam toda a altura dispon√≠vel.  
   - `baseline` ‚Üí Alinha os itens pela base do texto.  

5. **`align-content`**  
   - Aplica-se quando h√° v√°rias linhas de itens (com `flex-wrap: wrap;`).  
   - Funciona como `justify-content`, mas no eixo vertical.  

6. **`order`** (Reordenando elementos)  
   - Permite alterar a posi√ß√£o de um item na ordem de exibi√ß√£o.  
   - Exemplo: `order: 1;` no terceiro item faz com que ele v√° para o final.  
   - O valor padr√£o de `order` para todos os itens √© `0`.  

7. **`flex-wrap`**  
   - Controla se os itens devem permanecer na mesma linha ou quebrar para novas linhas quando o espa√ßo n√£o for suficiente.  
   - `nowrap` (padr√£o) ‚Üí Todos os itens ficam na mesma linha.  
   - `wrap` ‚Üí Itens quebram para uma nova linha se necess√°rio.  

8. **`flex` (Shorthand para `flex-grow`, `flex-shrink` e `flex-basis`)**  
   - `flex: 1 1 320px;` significa:  
     - `1` ‚Üí Pode crescer se houver espa√ßo (`flex-grow`).  
     - `1` ‚Üí Pode diminuir se necess√°rio (`flex-shrink`).  
     - `320px` ‚Üí Tamanho base do item (`flex-basis`).  

#### **Exemplo pr√°tico de organiza√ß√£o flex√≠vel:**  
```css
.flex-item {
    flex: 1 1 320px; /* Itens flex√≠veis que crescem e encolhem conforme necess√°rio */
}
```
Isso garante que os itens se ajustem dinamicamente ao espa√ßo dispon√≠vel, tornando o layout responsivo e eficiente.  

---

Esse resumo cobre tudo de novo que voc√™ aprendeu! üöÄ Se precisar de mais detalhes, s√≥ avisar.



PARTE 2:

### Layout Responsivo com Flexbox: Colunas e Galeria de Imagens  

Nesta aula, aprofundamos o uso do **Flexbox** para estruturar layouts responsivos com colunas e galerias.  

#### **Novos conceitos abordados:**  

1. **Cria√ß√£o de um layout com duas colunas (`.two-columns`)**  
   - O `display: flex;` permite que os elementos `.col` fiquem lado a lado.  
   - Cada `.col` funciona como uma coluna independente, podendo conter textos e outros elementos internos.  
   - Exemplo:  
     ```css
     .two-columns {
         display: flex; /* Ativa o flexbox */
     }
     ```
  
2. **Flexbox dentro de colunas (`.col`)**  
   - Cada coluna (`.col`) tamb√©m usa `display: flex;`, mas com `flex-direction: column;`, organizando os elementos verticalmente.  
   - O `margin` e `padding` ajudam a dar espa√ßamento e melhorar a legibilidade.  
   - Exemplo:  
     ```css
     .two-columns .col {
         display: flex;
         flex-direction: column; /* Elementos empilhados na vertical */
         background: green;
         margin: 15px;
         padding: 20px;
     }
     ```

3. **Galeria de imagens responsiva (`.gallery`)**  
   - O `display: flex;` e `flex-flow: row wrap;` permitem que os itens da galeria sejam distribu√≠dos horizontalmente e quebrem para a pr√≥xima linha conforme necess√°rio.  
   - Cada `.img` tem um `flex: 1 0 20%;`, garantindo que ocupem **20% da largura dispon√≠vel**, mas n√£o encolham (`flex-shrink: 0`).  
   - O `margin: 10px;` adiciona espa√ßamento entre as imagens.  
   - Exemplo:  
     ```css
     .gallery {
         display: flex;
         flex-flow: row wrap; /* Itens organizados horizontalmente e quebram quando necess√°rio */
     }

     .gallery .img {
         flex: 1 0 20%; /* Cada imagem ocupa 20% da largura do container */
         height: 50px;
         background: blue;
         margin: 10px;
     }
     ```

#### **Resumo pr√°tico:**  
- **Usamos Flexbox para criar um layout com duas colunas**, tornando-o mais flex√≠vel e responsivo.  
- **Criamos uma galeria de imagens din√¢mica** que se ajusta automaticamente ao tamanho da tela.  
- **Utilizamos `flex-direction: column;` para alinhar elementos verticalmente dentro das colunas.**  
- **Exploramos `flex-flow: row wrap;` para permitir que os itens da galeria quebrem de linha automaticamente.**  

Esse aprendizado permite criar layouts modernos e responsivos de forma eficiente! üöÄ